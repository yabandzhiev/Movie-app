{"version":3,"sources":["components/Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","vote","title","poster_path","overview","vote_average","className","src","alt","FEATURED_API","App","useState","movies","setMovies","searchTerm","setSearchTerm","useEffect","getMovies","API","fetch","then","res","json","data","results","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","length","map","movie","key","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sKAkCeA,EAxBD,SAAC,GAAD,IANQC,EAMLC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,SAAUC,EAAjC,EAAiCA,aAAjC,OACZ,yBAAKC,UAAU,SACb,yBACEC,IACEJ,EAZW,mCAaMA,EACb,wIAENK,IAAKN,IAEP,yBAAKI,UAAU,eACb,4BAAKJ,GACL,0BAAMI,UAAS,eAlBCL,EAkBqBI,EAjBrCJ,GAAQ,EAAU,QACbA,GAAQ,EAAU,SACf,SAgBLI,IAIL,yBAAKC,UAAU,eACb,wCACA,2BAAIF,MC1BJK,EACJ,sHAwDaC,MAnDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEuBF,mBAAS,IAFhC,mBAENG,EAFM,KAEMC,EAFN,KAIbC,qBAAU,WACRC,EAAUR,KACT,IAEH,IAAMQ,EAAY,SAACC,GACjBC,MAAMD,GACHE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLV,EAAUU,EAAKC,aAkBrB,OACE,oCACE,gCACE,0BAAMC,SAjBW,SAACC,GACtBA,EAAEC,iBAGAV,EADEH,EArBN,6FAsB2BA,EAEbL,GAEZM,EAAc,MAUR,2BACET,UAAU,SACVsB,KAAK,SACLC,YAAY,YACZC,MAAOhB,EACPiB,SAZa,SAACL,GACtBX,EAAcW,EAAEM,OAAOF,YAerB,yBAAKxB,UAAU,oBACZM,EAAOqB,OAAS,GACfrB,EAAOsB,KAAI,SAACC,GAAD,OAAW,kBAAC,EAAD,eAAOC,IAAKD,EAAME,IAAQF,UC1CtCG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1056c4b6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst IMAGES_API = \"https://image.tmdb.org/t/p/w1280\";\r\n\r\nconst setVoteClass = (vote) => {\r\n  if (vote >= 8) return \"green\";\r\n  else if (vote >= 6) return \"orange\";\r\n  else return \"red\";\r\n};\r\n\r\nconst Movie = ({ title, poster_path, overview, vote_average }) => (\r\n  <div className=\"movie\">\r\n    <img\r\n      src={\r\n        poster_path\r\n          ? IMAGES_API + poster_path\r\n          : \"https://images.unsplash.com/photo-1597688454919-cef3391fa915?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\"\r\n      }\r\n      alt={title}\r\n    />\r\n    <div className=\"movie__info\">\r\n      <h3>{title}</h3>\r\n      <span className={`tag ${setVoteClass(vote_average)}`}>\r\n        {vote_average}\r\n      </span>\r\n    </div>\r\n\r\n    <div className=\"movie__over\">\r\n      <h2>Overview</h2>\r\n      <p>{overview}</p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Movie;\r\n","import React, { useEffect, useState } from \"react\";\nimport Movie from \"./components/Movie\";\n\nconst FEATURED_API =\n  \"https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=f2b1251b28315a67ed4a45bd9aa64baa&page=1\";\n\nconst SEARCH_API =\n  \"https://api.themoviedb.org/3/search/movie?&api_key=f2b1251b28315a67ed4a45bd9aa64baa&query=\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    getMovies(FEATURED_API);\n  }, []);\n\n  const getMovies = (API) => {\n    fetch(API)\n      .then((res) => res.json())\n      .then((data) => {\n        setMovies(data.results);\n      });\n  };\n\n  const handleOnSubmit = (e) => {\n    e.preventDefault();\n\n    if (searchTerm) {\n      getMovies(SEARCH_API + searchTerm);\n    } else {\n      getMovies(FEATURED_API);\n    }\n    setSearchTerm(\"\");\n  };\n\n  const handleOnChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n  return (\n    <>\n      <header>\n        <form onSubmit={handleOnSubmit}>\n          <input\n            className=\"search\"\n            type=\"search\"\n            placeholder=\"Search...\"\n            value={searchTerm}\n            onChange={handleOnChange}\n          />\n        </form>\n      </header>\n      <div className=\"movie__container\">\n        {movies.length > 0 &&\n          movies.map((movie) => <Movie key={movie.id} {...movie} />)}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}